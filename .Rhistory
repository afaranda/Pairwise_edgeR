)
stuff
write.csv(allRes, "GOTERMS.csv")
getwd()
source('~/Downloads/REVIGO_treemap-2.r')
fn<-"~/Desktop/Pax6_Study_DE/results/Cor_DEG_Table.tsv"
idc='gene_id'
fdr='FDR'
lfc='logFC'
# Import data #################################################################
deg<-read.table(fn, sep='\t', quote="", header=T, stringsAsFactors = F)
# Run Gene Ontology Enrichments ###############################################
gl<-deg[abs(deg[,lfc]) > 1 & deg[,fdr]< 0.05, idc ]
gobp<-enrichGO(
gene = gl,
OrgDb = org.Mm.eg.db,
keyType = 'ENSEMBL',
ont = 'BP'
)
##############################################################################
library(clusterProfiler)
library(GOSemSim)
library(edgeR)
library(org.Mm.eg.db)
# Run Gene Ontology Enrichments ###############################################
gl<-deg[abs(deg[,lfc]) > 1 & deg[,fdr]< 0.05, idc ]
gobp<-enrichGO(
gene = gl,
OrgDb = org.Mm.eg.db,
keyType = 'ENSEMBL',
ont = 'BP'
)
allRes<-GenTable(
GOdata, classFisher=res.F.C,
elimFisher=res.F.E, weightFisher=res.F.W,
orderBy="classFisher", ranksOf="classFisher",
topNodes=100, numChar=100
)
gobp
gobp@result
dropGO(gobp, term=c('GO:0030099', 'GO:0071900'))
gobp
allRes<-GenTable(
GOdata, classFisher=res.F.C,
elimFisher=res.F.E, weightFisher=res.F.W,
orderBy="elimFisher", ranksOf="classFisher",
topNodes=100, numChar=100
)
row.names(gobp)
gobp@geneSets
gobp.elim<-dropGO(
gobp,
term = setdiff(
row.names(gobp@result),
allRes$GO.ID[1:20]
)
)
emapplot(gobp)
dev.off()
dev.off()
emapplot(gobp)
emapplot(gobp.elim)
gobp.elim<-dropGO(
gobp,
term = setdiff(
row.names(gobp@result),
allRes$GO.ID[1:100]
)
)
emapplot(gobp.elim)
barplot(gobp.elim)
barplot(gobp.elim, 10)
barplot(gobp.elim, 20)
?barplot
?enrichplot::barplot
barplot(gobp)
barplot(gobp.elim, num=20)
barplot(gobp.elim, terms=20)
barplot(gobp.elim, nterms=20)
barplot(gobp.elim, showCategory=20)
allRes<-GenTable(
GOdata, classFisher=res.F.C,
elimFisher=res.F.E, weightFisher=res.F.W,
orderBy="weightFisher", ranksOf="classFisher",
topNodes=100, numChar=100
)
gobp.elim<-dropGO(
gobp,
term = setdiff(
row.names(gobp@result),
allRes$GO.ID[1:100]
)
)
barplot(gobp.elim, showCategory=20)
fn<-"~/Desktop/Pax6_Study_DE/results/Epi_DEG_Table.tsv"
idc='gene_id'
fdr='FDR'
lfc='logFC'
# Import data #################################################################
deg<-read.table(fn, sep='\t', quote="", header=T, stringsAsFactors = F)
# Run Gene Ontology Enrichments ###############################################
gl<-deg[abs(deg[,lfc]) > 1 & deg[,fdr]< 0.05, idc ]
gobp<-enrichGO(
gene = gl,
OrgDb = org.Mm.eg.db,
keyType = 'ENSEMBL',
ont = 'BP'
)
ag<-ifelse(deg[,fdr] < 0.05 & abs(deg[,lfc]) > 1, 1, 0)
names(ag)<-deg[,idc]
GOdata<-new(
"topGOdata", ontology="BP", allGenes = ag,
geneSelectionFun = function(allScore){
return(allScore > 0)
}, annot=annFUN.org,
mapping="org.Mm.eg.db",
ID="ensembl"
)
# Run Enrichment Tests #######################################################
res.F.C<-runTest(GOdata, algorithm = "classic", statistic = "fisher")
res.F.E<-runTest(GOdata, algorithm = "elim", statistic = "fisher")
res.F.W<-runTest(GOdata, algorithm = "weight", statistic = "fisher")
allRes<-GenTable(
GOdata, classFisher=res.F.C,
elimFisher=res.F.E, weightFisher=res.F.W,
orderBy="weightFisher", ranksOf="classFisher",
topNodes=100, numChar=100
)
gobp.elim<-dropGO(
gobp,
term = setdiff(
row.names(gobp@result),
allRes$GO.ID[1:100]
)
)
barplot(gobp.elim, terms=20)
barplot(gobp)
barplot(gobp.elim, showCategory=20)
barplot(gobp, showCategory=20)
barplot(gobp.elim, showCategory=20)
allRes<-GenTable(
GOdata, classFisher=res.F.C,
elimFisher=res.F.E, weightFisher=res.F.W,
orderBy="elimFisher", ranksOf="classFisher",
topNodes=100, numChar=100
)
gobp.elim<-dropGO(
gobp,
term = setdiff(
row.names(gobp@result),
allRes$GO.ID[1:100]
)
)
barplot(gobp.elim, showCategory=20)
cnetlot(gobp.elim, showCategory=20)
cnetplot(gobp.elim, showCategory=20)
dev.off()
dev.off()
cnetplot(gobp.elim)
cnetplot(gobp)
?cnetplot
simplify(gopb)
simplify(gobp)
x<-simplify(gobp)
x
barplot(x)
barplot(gobp.elim)
library(GOplot)
?GOplot
data(EC)
EC$genes
head(EC$genes)
head(EC$david)
godata
head(GOdata)
GOdata
gobp
?circle_dat
EC$genelist
EC$david
head(EC$david)
gobp.elim@result
head(gobp.elim@result)
head(gobp.elim@gene2Symbol)
head(gobp.elim@geneSets)
terms<-data.frame(
ID = names(gobp.elim@geneSets),
genes = sapply(gobp.elim@geneSets, paste, sep=",")
)
sapply(gobp.elim@geneSets, paste, sep=",")
lapply(gobp.elim@geneSets, paste, sep=",")
x<-lapply(gobp.elim@geneSets, paste, sep=",")
x
head(x)
x<-lapply(gobp.elim@geneSets, function(x) paste(x,collapse=","))
x
terms<-data.frame(
ID = names(gobp.elim@geneSets),
genes = sapply(gobp.elim@geneSets, paste, collapse=",")
)
head(terms)
View(terms)
rm(x)
head(gobp@result)
terms<-gobp.elim@result[,c(1,2,6,8)]
head(EC$david)
names(terms)
terms$category<-"BP"
terms<-gobp.elim@result[,c(1,2,6,8)]
terms$category<-"BP"
names(terms)[2]<-'term'
names(terms)[3]<-'adj_pval'
names(terms)[4]<-'genes'
head(terms)
terms$genes<-gsub("/", "," termse$genes)
terms$genes<-gsub("/", ",", terms$genes)
head(terms)
head(deg)
genes<-deg[deg$gene_id %in% gl,c(1,5)]
nrow(genes)
circ<-circle_dat(terms, genes)
names(genes)[1]<-"ID"
circ<-circle_dat(terms, genes)
circ
length(unique(circ$ID))
length(unique(circ$genes))
EC$genes
EC$process
unique(circ$term)
unique(circ$term)[c(3, 11, 15, 25, 28, 67)]
chord<-chord_dat(data=circ, process=unique(circ$term)[c(3, 11, 15, 25, 28, 67)])
chord
GOChord(chord)
chord<-chord_dat(data=circ, process=unique(circ$term)[c(3, 11, 25, 28)])
GOChord(chord)
chord_dat
str(chord)
chord<-chord_dat(data=circ, genes = genes, process=unique(circ$term)[c(3, 11, 25, 28)])
GOChord(chord)
GOChord(chord, gene.order='logFC')
GOChord(chord, limit=c(3,0) gene.order='logFC')
GOChord(chord, limit=c(3,0), gene.order='logFC')
GOChord(chord, limit=c(2,0), gene.order='logFC')
chord<-chord_dat(data=circ, genes = genes, process=unique(circ$term)[c(3, 11, 15, 25, 28, 67)])
GOChord(chord, limit=c(2,0), gene.order='logFC')
GOChord(chord, limit=c(3,0), gene.order='logFC')
GOChord(chord, limit=c(3,1), gene.order='logFC')
GOChord(chord, limit=c(2,1), gene.order='logFC')
library(GOplot)
?GOchord
?GOChord
library(tximport)
library(edgeR)
?readDGE
install.packages('RMySQL')
library(RMySQL)
devtools::install_github("r-dbi/odbc")
install.packages('devtools')
library(devtools)
devtools::install_github("r-dbi/odbc")
shiny::runGadget(sparklyr::connection_spark_shinyapp(), viewer = .rs.embeddedViewer)
library(odbc)
library(RMySQL)
con<-dbConnect(
MySQL(),
dbname = NULL,
username = 'root',
password = 'adnaraf7',
host = NULL,
unix.socket = '/opt/local/var/run/mysql8/mysqld.sock',
port = 0,
client.flag = 0,
groups = "rs-dbi", default.file = NULL, ...
)
con<-dbConnect(
MySQL(),
dbname = NULL,
username = 'root',
password = 'adnaraf7',
host = NULL,
unix.socket = '/opt/local/var/run/mysql8/mysqld.sock',
port = 0,
client.flag = 0,
groups = "rs-dbi", default.file = NULL
)
con
dbListTables(con)
dbListDatabases(con)
dbSendQuery(con, 'CREATE DATABASE FOO;')
dbSendQuery(con, 'USE FOO;')
dbSendQuery(con, 'CREATE TABLE bar ( var1 char(10), var2 char(10));')
dbListTables(con)
dbSendQuery(con, 'INSERT INTO bar (var1, var2) values ("A", "B");')
dbSendQuery(con, 'SELECT * FROM bar;')
dbGetQuery(con, 'SELECT * FROM bar;')
dbFetch(con)
dbFetch(<MySQLResult:0,0,5>)
dbSendQuery(con, 'SELECT * FROM bar;')
dbListResults(con)
dbFetch(dbListResults(con))
dbFetch(dbListResults(con)[[1]])
source('~/Pairwise_edgeR/scripts/Annotate_Ensembl_Features.R')
library('org.Mm.eg.db')
source('~/Pairwise_edgeR/scripts/Annotate_Ensembl_Features.R')
nrow(lt)
length(unique(lt$ENTREZID))
length(unique(lt$gene_id))
# Import Annotations, append to "Gene Length" Table
if(file.exists(paste(data_dir,'Gene_Annotations.csv', sep='/'))){
print(TRUE)
}
# Import Annotations, append to "Gene Length" Table
if(file.exists(paste(data_dir,'Gen_Annotations.csv', sep='/'))){
print(TRUE)
}
else if(file.exists(paste(data_dir,'Gene_Annotations.csv', sep='/'))){
print('FOO')
}
# Import Annotations, append to "Gene Length" Table
if(file.exists(paste(data_dir,'Gen_Annotations.csv', sep='/'))){
print(TRUE)
}else if(file.exists(paste(data_dir,'Gene_Annotations.csv', sep='/'))){
print('FOO')
}
if(file.exists(paste(data_dir,'Gen_Annotations.csv', sep='/'))){
print(TRUE)
}
else if(file.exists(paste(data_dir,'Gene_Annotations.csv', sep='/'))){
print('FOO')
}
# Import Annotations, append to "Gene Length" Table
fn<-paste(data_dir,'Gene_Annotations.csv', sep='/')
if(file.exists(fn)){
lt<-read.csv()
print(TRUE)
} else {
ah<-AnnotationHub()
# Run Query to find proper Annotation Set:
# AnnotationHub::query(ah, pattern=c("EnsDb", "Mus musculus", "98"))
edb<-ah[['AH75036']]
lt<-merge(
lt, AnnotationDbi::select(
edb, keys=lt$gene_id,
columns = c("SYMBOL", "DESCRIPTION", "GENEBIOTYPE", "SEQCOORDSYSTEM"),
keytype = "GENEID"
),
by.x = 'gene_id', by.y='GENEID'
)
lt<-merge(
lt, AnnotationDbi::select(
org.Mm.eg.db, keys=unique(lt$SYMBOL),
columns = c("ENTREZID"),
keytype = "SYMBOL"
), by='SYMBOL'
)
row.names(lt)<-lt$gene_id
rm(ah, edb)
detach(package:AnnotationHub, unload=T)
detach(package:ensembldb, unload=T)
detach(package:AnnotationFilter, unload=T)
}
# Import Annotations, append to "Gene Length" Table
fn<-paste(data_dir,'Gene_Annotations.csv', sep='/')
if(file.exists(fn)){
lt<-read.csv(fn)
print(TRUE)
} else {
ah<-AnnotationHub()
# Run Query to find proper Annotation Set:
# AnnotationHub::query(ah, pattern=c("EnsDb", "Mus musculus", "98"))
edb<-ah[['AH75036']]
lt<-merge(
lt, AnnotationDbi::select(
edb, keys=lt$gene_id,
columns = c("SYMBOL", "DESCRIPTION", "GENEBIOTYPE", "SEQCOORDSYSTEM"),
keytype = "GENEID"
),
by.x = 'gene_id', by.y='GENEID'
)
lt<-merge(
lt, AnnotationDbi::select(
org.Mm.eg.db, keys=unique(lt$SYMBOL),
columns = c("ENTREZID"),
keytype = "SYMBOL"
), by='SYMBOL'
)
row.names(lt)<-lt$gene_id
rm(ah, edb)
detach(package:AnnotationHub, unload=T)
detach(package:ensembldb, unload=T)
detach(package:AnnotationFilter, unload=T)
}
lt
head(lt)
# Import Annotations, append to "Gene Length" Table
fn<-paste(data_dir,'Gene_Annotations.csv', sep='/')
if(file.exists(fn)){
lt<-read.csv(fn, row.names = T)
print(TRUE)
} else {
ah<-AnnotationHub()
# Run Query to find proper Annotation Set:
# AnnotationHub::query(ah, pattern=c("EnsDb", "Mus musculus", "98"))
edb<-ah[['AH75036']]
lt<-merge(
lt, AnnotationDbi::select(
edb, keys=lt$gene_id,
columns = c("SYMBOL", "DESCRIPTION", "GENEBIOTYPE", "SEQCOORDSYSTEM"),
keytype = "GENEID"
),
by.x = 'gene_id', by.y='GENEID'
)
lt<-merge(
lt, AnnotationDbi::select(
org.Mm.eg.db, keys=unique(lt$SYMBOL),
columns = c("ENTREZID"),
keytype = "SYMBOL"
), by='SYMBOL'
)
row.names(lt)<-lt$gene_id
rm(ah, edb)
detach(package:AnnotationHub, unload=T)
detach(package:ensembldb, unload=T)
detach(package:AnnotationFilter, unload=T)
}
head(lt)
# Import Annotations, append to "Gene Length" Table
fn<-paste(data_dir,'Gene_Annotations.csv', sep='/')
if(file.exists(fn)){
lt<-read.csv(fn, rownames = T)
print(TRUE)
} else {
ah<-AnnotationHub()
# Run Query to find proper Annotation Set:
# AnnotationHub::query(ah, pattern=c("EnsDb", "Mus musculus", "98"))
edb<-ah[['AH75036']]
lt<-merge(
lt, AnnotationDbi::select(
edb, keys=lt$gene_id,
columns = c("SYMBOL", "DESCRIPTION", "GENEBIOTYPE", "SEQCOORDSYSTEM"),
keytype = "GENEID"
),
by.x = 'gene_id', by.y='GENEID'
)
lt<-merge(
lt, AnnotationDbi::select(
org.Mm.eg.db, keys=unique(lt$SYMBOL),
columns = c("ENTREZID"),
keytype = "SYMBOL"
), by='SYMBOL'
)
row.names(lt)<-lt$gene_id
rm(ah, edb)
detach(package:AnnotationHub, unload=T)
detach(package:ensembldb, unload=T)
detach(package:AnnotationFilter, unload=T)
}
# Import Annotations, append to "Gene Length" Table
fn<-paste(data_dir,'Gene_Annotations.csv', sep='/')
if(file.exists(fn)){
lt<-read.csv(fn, row.names = 1)
print(TRUE)
} else {
ah<-AnnotationHub()
# Run Query to find proper Annotation Set:
# AnnotationHub::query(ah, pattern=c("EnsDb", "Mus musculus", "98"))
edb<-ah[['AH75036']]
lt<-merge(
lt, AnnotationDbi::select(
edb, keys=lt$gene_id,
columns = c("SYMBOL", "DESCRIPTION", "GENEBIOTYPE", "SEQCOORDSYSTEM"),
keytype = "GENEID"
),
by.x = 'gene_id', by.y='GENEID'
)
lt<-merge(
lt, AnnotationDbi::select(
org.Mm.eg.db, keys=unique(lt$SYMBOL),
columns = c("ENTREZID"),
keytype = "SYMBOL"
), by='SYMBOL'
)
row.names(lt)<-lt$gene_id
rm(ah, edb)
detach(package:AnnotationHub, unload=T)
detach(package:ensembldb, unload=T)
detach(package:AnnotationFilter, unload=T)
}
head(lt)
source('~/Pairwise_edgeR/scripts/Pairwise_Tests.R')
detach(package:AnnotationHub, unload=T)
detach(package:ensembldb, unload=T)
detach(package:AnnotationFilter, unload=T)
source('~/Pairwise_edgeR/scripts/Pairwise_Tests.R')
head(deg.et)
source('~/Pairwise_edgeR/scripts/Write_DEG_Spreadsheet.R')
source('~/Pairwise_edgeR/scripts/Write_DEG_Spreadsheet.R')
head(degSe t)
head(degSet)
contrast_files
contrast_files[[c]]['filename']
degSet<-read.csv(
contrast_files[[c]]['filename'],
row.names = 0
)
degSet<-read.csv(
contrast_files[[c]]['filename'],
row.names = 1
)
head(degSet)
source('~/Pairwise_edgeR/scripts/Write_DEG_Spreadsheet.R')
source('~/Pairwise_edgeR/scripts/Write_DEG_Spreadsheet.R')
