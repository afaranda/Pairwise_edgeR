library(DESeq2)
htdir<-"~/Desktop/DBI_HTSeq_Counts"
htdir
files<-list.files(htdir, pattern="_GeneCount.txt")
files
sampleTable<-data.frame(samples=gsub("GeneCount.txt", "", files), files=files)
sampleTable
sampleTable$condition=rep(c("A", "B", "C"), each=5)
ddsHTSeq<-DESeqDataSetFromHTSeqCount(sampleTable = sampleTable, directory = htdir, design ~ condition)
ddsHTSeq<-DESeqDataSetFromHTSeqCount(sampleTable = sampleTable, directory = htdir, design = ~ condition)
ddsHTSeq
ddsHTSeq$design
ddsHTSeq@design
ddsHTSeq
ddsHTSeq$condition
ddsHTSeq@colData
ddsHTSeq
ddsHTSeq@NAMES
ddsHTSeq
ddsHTSeq@rowRanges
ddsHTSeq@assays
ddsHTSeq@elementMetadata
ddsHTSeq$condition
exprs(ddsHTSeq)
ddsHTSeq$condition
ddsHTSeq
ddsHTSeq
ddsHTSeq[1]
ddsHTSeq[2]
ddsHTSeq[[2]]
ddsHTSeq[1,1]
ddsHTSeq[1,2]
ddsHTSeq[1,3]
ddsHTSeq[2,3]
ddsHTSeq[1,3]
ddsHTSeq[2,3]
ddsHTSeq
BiocManager::install('BoolNet')
data(cellcycle)
library(BoolNet)
data(cellcycle)
cellcycle
cellcycle@
''
cellcycle$genes
cellcycle$fixed
cellcycle$interactions
?BoolNet
data("yeastTimeSeries")
yeastTimeSeries
class(yeastTimeSeries)
binarizeTimeSeries(yeasyTimeSeries)
binarizeTimeSeries(yeastTimeSeries)
bin<-binarizeTimeSeries(yeastTimeSeries)
bin
reconstructNetwork(bin)
reconstructNetwork(bin, maxK = 3)
reconstructNetwork(bin, maxK = 3, numGenes=4)
reconstructNetwork(bin, method="bestfit")
bin<-binarizeTimeSeries(yeastTimeSeries)
bin
ts<-generateTimeSeries(cellcycle, numSeries = 50, numMeasurements = 10, noiseLevel = 0.1)
ts
bin<-binarize(ts)
bin<-binarizeTimeSeries(ts)
bin
reconstructNetwork(bin)
reconstructNetwork(bin, maxK = 8)
reconstructNetwork(bin, maxK = 3)
reconstructNetwork()
reconstructNetwork
ls
ls()
ls
ls
ls
ls
ls
ls
lllsssss
ls
reconstructNetwork(measurements = bin, maxK = 5, method="bestfit")
rcsm<-edit(reconstructNetwork)
rcsm(measurements = bin, maxK = 5, method="bestfit")
bin[[1]]
bin
bin$binarizedMeasurements
rcsm(measurements = bin$binarizedMeasurements, maxK = 5, method="bestfit")
yeastTimeSeries
bin<-binarizeTimeSeries(yeastTimeSeries)
bin
yeastTimeSeries
rcsm(measurements = bin$binarizedMeasurements, maxK = 5, method="bestfit")
rcsm(measurements = bin$binarizedMeasurements, maxK = 4, method="bestfit")
library(edgeR)
glmFit
edit(glmFit)
y$glmFit
require(mclust)
data(diabetes)
summary(diabetes)
rnrom(10,1,0)
rnorm(10,1,0)
rnorm(10,1,0.000000001)
rnorm(10,1,0.000001)
rnorm(10,1,0.0000001)
mean(rnorm(10,1,0.0000001))
sd(rnorm(10,1,0.0000001))
sd(rnorm(10,1,0.00001))
sd(rnorm(10,1,0.001))
rnorm(10,1,0.01)
rnorm(10,1,0.001)
rnorm(10,1,0.0001)
rnorm(10,1.00001,0.0001)
rnorm(10,1.0000001,0.0001)
rnorm(10,1.00001,0.0001)
rnorm(10,1.01,0.0001)
rnorm(10,1.0001,0.0001)
rnorm(10,1.001,0.0001)
rnorm(10,1.001,0.000000001)
rnorm(10,1.000001,0.000000001)
rnorm(10,1.000001,0.00000001)
rnorm(10,1.000001,0.0000001)
rnorm(10,1.000001,0.000001)
rnorm(10,1.000001,0.00001)
mean(rnorm(10,1.000001,0.00001))
hist(rnorm(10,1.000001,0.00001))
hist(rnorm(1000,1.000001,0.00001))
mean(c(1))
sd(c(1))
sd(c(1,1))
sd(c(1,2))
sd(c(1,4))
sd(c(1))
pbinom
?pbinom
pbinom(c(1,1,0,0,1))
pbinom(c(1,1,0,0,1), 10)
pbinom(c(1,1,0,0,1), 10, 0.5)
pbinom(c(1), 10, 0.5)
pbinom(c(1), 1, 0.5)
pbinom(6, 1, 0.5)
pbinom(6, 10, 0.5)
pbinom(6, 10, 0.6)
pbinom(4, 10, 0.6)
pbinom(10, 10, 0.6)
pbinom(0, 10, 0.6)
pbinom(1, 10, 0.6)
pbinom(2, 10, 0.6)
pbinom(3, 10, 0.6)
pbinom(2, 10, 0.5)
pbinom(1, 10, 0.5)
pbinom(6, 10, 0.5)
pbinom(6, 10, 0.4)
pbinom(6, 10, 0.4)
pbinom(7, 10, 0.4)
pbinom(8, 10, 0.4)
pbinom(10, 10, 0.4)
pbinom(4, 10, 0.4)
pbinom(4, 10, 0.4)
dbinom(4, 10, 0.4)
dbinom(6, 10, 0.6)
dbinom(6, 10, 0.6)
dbinom(6, 10, 0.5)
dbinom(6, 10, 0.4)
dbinom(6, 10, 0.3)
dbinom(6, 10, 0.6)
dbinom(6, 10, 0.7)
dbinom(6, 10, 0.8)
rnorm
n<-rnorm(10)
n
x<-rnorm(10)
product
pr
prod
prod(1,2,3)
prod(1,2,3, 4)
prod(1,2,3, 4, 5)
prod(1,2,3, 4, 5, 6)
prod(1,2,3, 4, 5, 6, 7)
factorial
prod(1,2,3, 4, 5, 6, 7)
x
dbinom(x)
dnorm(x)
prod(dnorm(x))
for k in 1:length(x){
a<-x[1:k]
b<-x[k:length(x)]
print(mean(a))
print(mean(b))
}
for k in 1:length(x){
a<-x[1:k]
b<-x[k:length(x)]
print(mean(a))
print(mean(b))
}
for (k in 1:length(x)){
a<-x[1:k]
b<-x[k:length(x)]
print(mean(a))
print(mean(b))
}
for (k in 1:length(x)){
a<-x[1:k]
b<-x[k:length(x)]
print(paste("A:", mean(a), "B:", mean(b)))
}
for (k in 1:length(x)){
a<-x[1:k]
b<-x[k:length(x)]
print(
paste(
"A:", mean(a), "B:", mean(b),
"Prod A:", prod(dnorm(a)),
"Prod A:", prod(dnorm(b))
)
)
}
for (k in 1:length(x)){
a<-x[1:k]
b<-x[k:length(x)]
print(
paste(
"A:", mean(a), "B:", mean(b),
"Prod A:", prod(dnorm(a)),
"Prod B:", prod(dnorm(b))
)
)
}
for (k in 1:length(x)){
a<-x[1:k]
b<-x[k:length(x)]
print(
paste(
"A:", mean(a), "B:", mean(b),
"Prod A:", prod(dnorm(a)),
"Prod B:", prod(dnorm(b))
)
)
}
x<-rnorm(10, mean = 5)
for (k in 1:length(x)){
a<-x[1:k]
b<-x[k:length(x)]
print(
paste(
"A:", mean(a), "B:", mean(b),
"Prod A:", prod(dnorm(a)),
"Prod B:", prod(dnorm(b))
)
)
}
x<-rnorm(10, mean = 5)
for (k in 1:length(x)){
a<-x[1:k]
b<-x[k:length(x)]
print(
paste(
"A:", mean(a), "B:", mean(b),
"Prod A:", log(prod(dnorm(a))),
"Prod B:", log(prod(dnorm(b)))
)
)
}
sd(c(0,1))
?sd
a<-c(1)
mean(a)
sd(c(a,mean(a)))
a<-c(2)
a
a
sd(c(a,mean(a)))
a<-c(1,2)
sd(c(a,mean(a)))
sd(a)
sd(c(a,1.5)
)
dnorm(1,0,1)
dnorm(1,0,0)
dnorm(1,1,0)
dnorm(1,1,0.00000001)
dnorm(1,1,0.00000000000000001)
dnorm(1,1,0.1)
dnorm(1,1,1)
log(Inf)
dnorm(1,1,0)
log(dnorm(1,1,0))
rbinom(10,1,0)
rbinom(10,0,0)
rbinom(10,0,1)
rnorm(10,1,0)
rnorm(10,0,0)
dnorm(1,1,0)
dnorm(1,1,0.0001)
dnorm(1,1,1)
dnorm(1,1,0.01)
dnorm(1,1,10)
emControl()
priorControl()
?priorControl
defaultPrior(x)
defaultPrior(x, "E")
defaultPrior(x, modelName = "E")
defaultPrior(x, modelName = "E", G=1)
defaultPrior(x, modelName = "E", G=2)
defaultPrior(x, modelName = "E", G=c(1,2,3))
mean(x)
defaultPrior(x, modelName = "E", G=1)
defaultPrior(x, modelName = "E", G=3)
head(diabetes)
nrow(diabetes)
class.d<-diabetes$class
table(class.d)
diabetes[,-1]
X<-diabetes[,-1]
clPairs(X,class.d)
?clPairs
fit<-mclust(X)
fit<-mClust(X)
fit<-Mclust(X)
fit
Mclust(x)
fit
plot(fit, what="BIC")
f2<-Mclust(x)
plot(f2, what="BIC")
x2<-c(rnorm(4, 0), rnorm(6, 1))
f2<-Mclust(x2)
plot(f2, what="BIC")
x2<-c(rnorm(1000, 0, 0.05), rnorm(500, 1, 0.05))
hist(x2)
f2<-Mclust(x2)
plot(f2, what="BIC")
x2<-c(rnorm(100, 0, 0.05), rnorm(50, 1, 0.05))
f2<-Mclust(x2)
plot(f2, what="BIC")
x2<-c(rnorm(10, 0, 0.05), rnorm(5, 1, 0.05))
plot(f2, what="BIC")
f2<-Mclust(x2)
plot(f2, what="BIC")
x2<-c(rnorm(3, 0, 0.05), rnorm(5, 1, 0.05))
f2<-Mclust(x2)
plot(f2, what="BIC")
x2<-c(rnorm(3, 0, 0.05), rnorm(1, 1, 0.05))
fit<-Mclust(X)
f2<-Mclust(x2)
plot(f2, what="BIC")
x2<-c(rnorm(3, 0, 0.5), rnorm(1, 1, 0.5))
fit<-Mclust(X)
f2<-Mclust(x2)
plot(f2, what="BIC")
x2<-c(rnorm(10, 0, 0.5), rnorm(10, 1, 0.5))
f2<-Mclust(x2)
plot(f2, what="BIC")
x2<-c(rnorm(100, 0, 0.5), rnorm(100, 1, 0.5))
plot(f2, what="BIC")
fit<-Mclust(X)
f2<-Mclust(x2)
plot(f2, what="BIC")
x2<-c(rnorm(10000, 0, 0.5), rnorm(10000, 1, 0.5))
f2<-Mclust(x2)
plot(f2, what="BIC")
hist(f2)
f2
hist(x2)
x2<-c(rnorm(100, 0, 0.5), rnorm(100, 5, 0.5))
f2<-Mclust(x2)
plot(f2, what="BIC")
x2<-c(rnorm(10, 0, 0.5), rnorm(10, 5, 0.5))
f2<-Mclust(x2)
plot(f2, what="BIC")
x2<-c(rnorm(10, 0, 0.5), rnorm(1, 5, 0.5))
fit<-Mclust(X)
f2<-Mclust(x2)
plot(f2, what="BIC")
x2
f2<-Mclust(x2)
plot(f2, what="BIC")
dno
rbinom(10,1)
rbinom(10,1, 0.5)
rbinom(10,2, 0.5)
rbinom(10,3, 0.5)
rbinom(10,4, 0.5)
rbinom(10,1, 0.5)
rbinom(10,1, 0.2)
rbinom(10,1, 0.3)
rbinom(10,1, 0.4)
rbinom(10,1, 0.4)
rbinom(10,1, 0.4)
rbinom(10,1, 0.4)
rbinom(10,1, 0.4)
rbinom(10,1, 0.4)
?rbinom
rbinom(10,10, 0.4)
rbinom(10,c(1,3), 0.4)
rbinom(10,c(1,3), 0.4)
rbinom(10,c(1,3), 0.4)
rbinom(10,10, 0.4)
rbinom(10,10, 0.4)
matrix(rep(0,9),3,3)
library('AnnotationHub')
print(detatch(AnnontationHub))
print(detach(AnnontationHub))
print(detach(package:AnnontationHub))
print(detach(package:AnnontationHub, unload=T))
print(detach(package:AnnontationHub, unload=T))
detach(package=AnnontationHub, unload=T)
detach(package='AnnontationHub', unload=T)
detach(package:'AnnontationHub', unload=T)
?detach
detach(name='AnnontationHub', unload=T)
detach(name='AnnotationHub', unload=T)
detach(AnnotationHub, unload=T)
detach(name=AnnotationHub, unload=T)
search()
detach(name=package:AnnotationHub, unload=T)
library('AnnotationHub')
source('~/Documents/Pairwise_edgeR/scripts/Pairwise_edgeR_ExactTest.R')
getwd()
setwd('/home/adam/Documents/Pairwise_edgeR')
source('~/Documents/Pairwise_edgeR/scripts/Pairwise_edgeR_ExactTest.R')
source('~/Documents/Pairwise_edgeR/scripts/Pairwise_edgeR_ExactTest.R')
